Fonctionnement de mon programme :

Creé aleatoirement une solution valide, cherche tous les voisins de cette solution , les évalues.
Si un voisins est meilleurs, on le selectionne et on cherche ces voisins ...

Liste tabou de base implémenté, probleme rencontrer : il n'est pas rare que tous les "voisins" 
sont des solution qui on une capacité trop grande ou tabou.

Solution trouvé : Creation d'une liste de voisin, si tous les voisins sont evaluate a -1 ou TABOU, alors on prend aleatoirement un voisin

Resultat sur les fichier avec les bon temps d'execution mais durée tabou fixe:
Fichier		MeilleurResDmonAlgo		resultat donné par le prof
005			215						215
007a		2581					2581
007			245						245
020a		200						200 
050a		250						250    ( Trouvé des la solution initial :p )
050b		310						310    ( Trouvé des la solution initial :p )
050d		49481					28163  ( probleme : n'a pas le temps de tester assez de batch)
050e		25192					24281
100a		73 993 				  	49 392  
200a		695 509              	323 955
Pour les 100a et 200a le nombre de batch de depart est correcte (trouvé en 16 ms sur 60sec pour le 200) , mais ensuite...
l'algo ne fait que 50 iteration donc , c'est la qu'il faut travaillé :D ( surement sur la recherche des voisins trop gourmande)


Fait initMinimizeBatch() -> j'ai amelioré la fonction an la remplacant pour l'instant par une fonction initMinimizeBatch2()
qui donne le vrai nombre de batch mini.
Le probleme maintenant pour les grand nombre d'objet, c'est que ma recherche de voisin est beaucoup trop gourmande ! du coup sa fait a peine 
100 iteration :D

idée ( on augmente le nombre de batch si la solution n'a pas été améliorer pendant X solution , pendant X seconde c'est p-e mieux)

Idée on arrive TRES souvent à des capacity exceeded , peut etre peut on mémoriser ce qui fait l'exces et eviter de créer ses solutions

A faire aussi : OPTIMISER LA RECHERCHE DES VOISIN !

à faire : faire evoluer la durée tabou 

Réglage auto-adaptatif de la longueur de la liste taboue
 technique consiste à laisser la longueur de la liste taboue se régler
elle-même au cours de la recherche :
- Si on observe que l’algorithme tend à cycler (ou tend à rester confiné dans la
même région), on augmente la longueur de la liste
- Sinon on la réduit légèrement